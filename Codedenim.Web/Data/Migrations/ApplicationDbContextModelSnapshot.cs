// <auto-generated />
using Codedenim.Domain;
using Codedenim.Domain.Forums;
using Codedenim.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Codedenim.Web.Data.Migrations
{
    [DbContext(typeof(CodedenimContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Codedenim.Domain.Assesment.AssesmentQuestionAnswer", b =>
                {
                    b.Property<int>("AssesmentQuestionAnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer")
                        .IsRequired();

                    b.Property<int>("CourseId");

                    b.Property<bool>("IsFillInTheGag");

                    b.Property<bool>("IsMultiChoiceAnswer");

                    b.Property<bool>("IsSingleChoiceAnswer");

                    b.Property<string>("Option1");

                    b.Property<string>("Option2");

                    b.Property<string>("Option3");

                    b.Property<string>("Option4");

                    b.Property<string>("Question")
                        .IsRequired();

                    b.Property<string>("QuestionHint");

                    b.Property<string>("QuestionType");

                    b.HasKey("AssesmentQuestionAnswerId");

                    b.HasIndex("CourseId");

                    b.ToTable("AssesmentQuestionAnswer");
                });

            modelBuilder.Entity("Codedenim.Domain.Assesment.StudentAssesment", b =>
                {
                    b.Property<int>("StudentAssesmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CourseId");

                    b.Property<int>("CousreId");

                    b.Property<string>("StudentId");

                    b.Property<int>("TotalQuestion");

                    b.Property<double>("TotalScore");

                    b.HasKey("StudentAssesmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAssesment");
                });

            modelBuilder.Entity("Codedenim.Domain.Assesment.StudentQuestion", b =>
                {
                    b.Property<int>("StudentQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<bool>("Check1");

                    b.Property<bool>("Check2");

                    b.Property<bool>("Check3");

                    b.Property<bool>("Check4");

                    b.Property<int>("ExamTime");

                    b.Property<string>("FilledAnswer");

                    b.Property<bool>("IsCorrect");

                    b.Property<bool>("IsFillInTheGag");

                    b.Property<bool>("IsMultiChoiceAnswer");

                    b.Property<string>("Option1");

                    b.Property<string>("Option2");

                    b.Property<string>("Option3");

                    b.Property<string>("Option4");

                    b.Property<string>("Question");

                    b.Property<string>("QuestionHint");

                    b.Property<int>("QuestionNumber");

                    b.Property<string>("SelectedAnswer");

                    b.Property<string>("StudentId");

                    b.Property<int>("TopicId");

                    b.Property<int>("TotalQuestion");

                    b.HasKey("StudentQuestionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TopicId");

                    b.ToTable("StudentQuestion");
                });

            modelBuilder.Entity("Codedenim.Domain.AssignCourseCategory", b =>
                {
                    b.Property<int>("AssignCourseCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseCategoryId");

                    b.Property<int>("CourseId");

                    b.Property<int?>("StudentAssignedCourseId");

                    b.HasKey("AssignCourseCategoryId");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentAssignedCourseId");

                    b.ToTable("AssignCourseCategories");
                });

            modelBuilder.Entity("Codedenim.Domain.AssignmentReview", b =>
                {
                    b.Property<int>("AssignmentReviewId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Rating");

                    b.Property<string>("ReviewComment");

                    b.Property<int>("SubmitAssignmentId");

                    b.HasKey("AssignmentReviewId");

                    b.HasIndex("SubmitAssignmentId");

                    b.ToTable("AssignmentReview");
                });

            modelBuilder.Entity("Codedenim.Domain.BlogPost.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<int>("PostId");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Codedenim.Domain.BlogPost.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset>("PostDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("TopicId");

                    b.Property<string>("TutorId");

                    b.HasKey("PostId");

                    b.HasIndex("TopicId");

                    b.HasIndex("TutorId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Codedenim.Domain.BlogPost.PostTags", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<int>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("Codedenim.Domain.BlogPost.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Codedenim.Domain.CBTE.QuizRule", b =>
                {
                    b.Property<int>("QuizRuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MaximumTime");

                    b.Property<int>("ModuleId");

                    b.Property<double>("ScorePerQuestion");

                    b.Property<int>("TopicId");

                    b.Property<int>("TotalQuestion");

                    b.HasKey("QuizRuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TopicId");

                    b.ToTable("QuizRules");
                });

            modelBuilder.Entity("Codedenim.Domain.CBTE.StudentTestLog", b =>
                {
                    b.Property<int>("StudentTestLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ExamTaken");

                    b.Property<int>("ModuleId");

                    b.Property<double>("Score");

                    b.Property<string>("StudentId");

                    b.Property<double>("TotalScore");

                    b.HasKey("StudentTestLogId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentTestLog");
                });

            modelBuilder.Entity("Codedenim.Domain.CorperEnrolledCourses", b =>
                {
                    b.Property<int>("CorperEnrolledCoursesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CorperCallUpNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CourseCategoryId");

                    b.Property<int>("CourseId");

                    b.Property<string>("StudentId");

                    b.HasKey("CorperEnrolledCoursesId");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("CorperEnrolledCourses");
                });

            modelBuilder.Entity("Codedenim.Domain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CorperEnrolledCoursesId");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("CourseDescription")
                        .HasMaxLength(300);

                    b.Property<byte[]>("CourseImage");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset?>("DateAdded");

                    b.Property<int>("ExpectedTime");

                    b.Property<string>("FileLocation")
                        .HasMaxLength(300);

                    b.Property<int>("Points");

                    b.HasKey("CourseId");

                    b.HasIndex("CorperEnrolledCoursesId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Codedenim.Domain.CourseCategory", b =>
                {
                    b.Property<int>("CourseCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(200);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(300);

                    b.Property<string>("StudentType")
                        .HasMaxLength(50);

                    b.HasKey("CourseCategoryId");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("Codedenim.Domain.CourseEnrollment", b =>
                {
                    b.Property<int>("CourseEnrollmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<bool>("HasEndCourse");

                    b.Property<bool>("HasStartCourse");

                    b.Property<int>("StudentId");

                    b.Property<string>("StudentId1");

                    b.HasKey("CourseEnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId1");

                    b.ToTable("CourseEnrollment");
                });

            modelBuilder.Entity("Codedenim.Domain.CourseRating", b =>
                {
                    b.Property<int>("CourseRatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<int>("Dislike");

                    b.Property<int>("Rating");

                    b.HasKey("CourseRatingId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseRatings");
                });

            modelBuilder.Entity("Codedenim.Domain.EnrollForCourse", b =>
                {
                    b.Property<int>("EnrollForCourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseCategoryId");

                    b.Property<string>("StudentId");

                    b.HasKey("EnrollForCourseId");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("EnrollForCourses");
                });

            modelBuilder.Entity("Codedenim.Domain.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseID");

                    b.Property<int?>("Grade");

                    b.Property<int>("StudentID");

                    b.Property<string>("StudentId");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Codedenim.Domain.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(355);

                    b.Property<int>("FileType");

                    b.Property<int>("TutorId");

                    b.Property<string>("TutorId1");

                    b.HasKey("FileId");

                    b.HasIndex("TutorId1");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.Forum", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("ForumName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("LastPosted");

                    b.HasKey("CourseId");

                    b.ToTable("Fora");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumAnswer", b =>
                {
                    b.Property<int>("ForumAnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<int>("ForumQuestionId");

                    b.Property<DateTime>("ReplyDate");

                    b.Property<string>("UserId");

                    b.HasKey("ForumAnswerId");

                    b.HasIndex("ForumQuestionId");

                    b.ToTable("ForumAnswers");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumAnswerVoteForumAnswers", b =>
                {
                    b.Property<int>("ForumAnswerId");

                    b.Property<int>("VoteForumAnswerId");

                    b.HasKey("ForumAnswerId", "VoteForumAnswerId");

                    b.HasIndex("VoteForumAnswerId");

                    b.ToTable("ForumAnswerVoteForumAnswers");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumQuestion", b =>
                {
                    b.Property<int>("ForumQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("PostDate");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("StudentId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ForumQuestionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("ForumQuestions");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumQuestionView", b =>
                {
                    b.Property<int>("ForumQuestionId");

                    b.Property<int>("ViewCounter");

                    b.HasKey("ForumQuestionId");

                    b.ToTable("ForumQuestionViews");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumView", b =>
                {
                    b.Property<int>("ContentViewId");

                    b.Property<int>("ViewCounter");

                    b.HasKey("ContentViewId");

                    b.ToTable("ForumViews");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.VoteForumAnswer", b =>
                {
                    b.Property<int>("VoteForumAnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ForumAnswerId");

                    b.Property<string>("UserId");

                    b.Property<int>("Vote");

                    b.HasKey("VoteForumAnswerId");

                    b.ToTable("VoteForumAnswer");
                });

            modelBuilder.Entity("Codedenim.Domain.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<int>("ExpectedTime");

                    b.Property<string>("ModuleDescription");

                    b.Property<string>("ModuleName");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Codedenim.Domain.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("PaymentName")
                        .HasMaxLength(100);

                    b.Property<string>("PaymentTypeValue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.QuizLog", b =>
                {
                    b.Property<int>("QuizLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ExamTaken");

                    b.Property<int>("ExamTypeId");

                    b.Property<int>("LevelId");

                    b.Property<int>("ModuleId");

                    b.Property<double>("Score");

                    b.Property<int>("SemesterId");

                    b.Property<int>("SessionId");

                    b.Property<string>("StudentId");

                    b.Property<int>("TopicId");

                    b.Property<double>("TotalScore");

                    b.HasKey("QuizLogId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizLogs");
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.StudentTopicQuiz", b =>
                {
                    b.Property<int>("StudentTopicQuizId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("Check1");

                    b.Property<bool>("Check2");

                    b.Property<bool>("Check3");

                    b.Property<bool>("Check4");

                    b.Property<int>("ExamTime");

                    b.Property<string>("FilledAnswer")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsCorrect");

                    b.Property<bool>("IsFillInTheGag");

                    b.Property<bool>("IsMultiChoiceAnswer");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Option4")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("QuestionHint")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("QuestionNumber");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("StudentId");

                    b.Property<int>("StudentQuestionId");

                    b.Property<int>("TotalQuestion");

                    b.HasKey("StudentTopicQuizId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentTopicQuizs");
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExpectedTime");

                    b.Property<int>("ModuleId");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("TopicId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.TopicQuiz", b =>
                {
                    b.Property<int>("TopicQuizId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer")
                        .IsRequired();

                    b.Property<bool>("IsFillInTheGag");

                    b.Property<bool>("IsMultiChoiceAnswer");

                    b.Property<bool>("IsSingleChoiceAnswer");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Option1");

                    b.Property<string>("Option2");

                    b.Property<string>("Option3");

                    b.Property<string>("Option4");

                    b.Property<string>("Question")
                        .IsRequired();

                    b.Property<string>("QuestionHint");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(200);

                    b.Property<int>("TopicId");

                    b.HasKey("TopicQuizId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicQuizs");
                });

            modelBuilder.Entity("Codedenim.Domain.RemitaPaymentLog", b =>
                {
                    b.Property<int>("RemitaPaymentLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount")
                        .HasMaxLength(20);

                    b.Property<string>("OrderId")
                        .HasMaxLength(50);

                    b.Property<string>("PayerName")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("PaymentDate");

                    b.Property<string>("PaymentName")
                        .HasMaxLength(50);

                    b.Property<string>("Rrr")
                        .HasMaxLength(100);

                    b.Property<string>("StatusCode")
                        .HasMaxLength(50);

                    b.Property<string>("TransactionMessage")
                        .HasMaxLength(50);

                    b.HasKey("RemitaPaymentLogId");

                    b.ToTable("RemitaPaymentLogs");
                });

            modelBuilder.Entity("Codedenim.Domain.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountType")
                        .HasMaxLength(15);

                    b.Property<bool>("Active");

                    b.Property<int?>("Age");

                    b.Property<string>("Batch")
                        .HasMaxLength(30);

                    b.Property<string>("CallUpNo")
                        .HasMaxLength(50);

                    b.Property<string>("CountryOfBirth")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DateOfBirth");

                    b.Property<string>("Discpline")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("EnrollmentDate");

                    b.Property<string>("FileLocation");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("Gender");

                    b.Property<string>("Institution")
                        .HasMaxLength(50);

                    b.Property<bool>("IsAcctive");

                    b.Property<bool>("IsGraduated");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MatricNo")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Nationality");

                    b.Property<byte[]>("Passport");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("StateOfOrigin")
                        .HasMaxLength(50);

                    b.Property<string>("StateOfService")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasMaxLength(5);

                    b.Property<string>("TownOfBirth")
                        .HasMaxLength(50);

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Codedenim.Domain.StudentAssignedCourse", b =>
                {
                    b.Property<int>("StudentAssignedCourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<string>("StudentId");

                    b.HasKey("StudentAssignedCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAssignedCourses");
                });

            modelBuilder.Entity("Codedenim.Domain.StudentPayment", b =>
                {
                    b.Property<int>("StudentPaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AmountPaid");

                    b.Property<int>("CourseCategoryId");

                    b.Property<bool>("IsPayed");

                    b.Property<string>("OrderId");

                    b.Property<DateTimeOffset>("PaymentDateTime");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20);

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(20);

                    b.Property<string>("StudentId");

                    b.HasKey("StudentPaymentId");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPayments");
                });

            modelBuilder.Entity("Codedenim.Domain.SubmitAssignment", b =>
                {
                    b.Property<int>("SubmitAssignmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignmentBody");

                    b.Property<string>("AttachmentLocation");

                    b.Property<string>("StudentId");

                    b.Property<int>("TopicId");

                    b.HasKey("SubmitAssignmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TopicId");

                    b.ToTable("SubmitAssignment");
                });

            modelBuilder.Entity("Codedenim.Domain.TopicAssignment", b =>
                {
                    b.Property<int>("TopicAssignmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignmentDescription")
                        .HasMaxLength(300);

                    b.Property<DateTimeOffset?>("AssignmentDueDate");

                    b.Property<string>("AssignmentTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("TopicId");

                    b.HasKey("TopicAssignmentId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicAssignment");
                });

            modelBuilder.Entity("Codedenim.Domain.TopicMaterialUpload", b =>
                {
                    b.Property<int>("TopicMaterialUploadId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FileLocation")
                        .HasMaxLength(300);

                    b.Property<int>("FileType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TopicId");

                    b.Property<string>("TutorId");

                    b.HasKey("TopicMaterialUploadId");

                    b.HasIndex("TopicId");

                    b.HasIndex("TutorId");

                    b.ToTable("TopicMaterialUploads");
                });

            modelBuilder.Entity("Codedenim.Domain.Tutor", b =>
                {
                    b.Property<string>("TutorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActiveStatus")
                        .HasMaxLength(50);

                    b.Property<int?>("Age");

                    b.Property<string>("CountryOfBirth")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DateOfBirth");

                    b.Property<string>("Designation")
                        .HasMaxLength(4);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FileLocation");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("Gender");

                    b.Property<string>("ImageLocation");

                    b.Property<bool>("IsAcctive");

                    b.Property<bool>("IsActiveTutor");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(10);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Nationality");

                    b.Property<byte[]>("Passport");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("StaffRole")
                        .HasMaxLength(50);

                    b.Property<string>("StateOfOrigin")
                        .HasMaxLength(50);

                    b.Property<string>("TownOfBirth")
                        .HasMaxLength(50);

                    b.HasKey("TutorId");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("Codedenim.Domain.TutorCourse", b =>
                {
                    b.Property<int>("TutorCoursesId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<string>("TutorId");

                    b.HasKey("TutorCoursesId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorCourses");
                });

            modelBuilder.Entity("Codedenim.Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Codedenim.Domain.Assesment.AssesmentQuestionAnswer", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Course")
                        .WithMany("AssesmentQuestionAnswers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Assesment.StudentAssesment", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("StudentAssesments")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.Assesment.StudentQuestion", b =>
                {
                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("StudentQuestions")
                        .HasForeignKey("StudentId");

                    b.HasOne("Codedenim.Domain.Quiz.Topic", "Topic")
                        .WithMany("StudentQuestions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.AssignCourseCategory", b =>
                {
                    b.HasOne("Codedenim.Domain.CourseCategory", "CourseCategory")
                        .WithMany()
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Course", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.StudentAssignedCourse", "StudentAssignedCourse")
                        .WithMany()
                        .HasForeignKey("StudentAssignedCourseId");
                });

            modelBuilder.Entity("Codedenim.Domain.AssignmentReview", b =>
                {
                    b.HasOne("Codedenim.Domain.SubmitAssignment", "SubmitAssignment")
                        .WithMany("AssignmentReviews")
                        .HasForeignKey("SubmitAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.BlogPost.Comment", b =>
                {
                    b.HasOne("Codedenim.Domain.BlogPost.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.BlogPost.Post", b =>
                {
                    b.HasOne("Codedenim.Domain.Quiz.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Tutor", "Tutor")
                        .WithMany("Posts")
                        .HasForeignKey("TutorId");
                });

            modelBuilder.Entity("Codedenim.Domain.BlogPost.PostTags", b =>
                {
                    b.HasOne("Codedenim.Domain.BlogPost.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.BlogPost.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.CBTE.QuizRule", b =>
                {
                    b.HasOne("Codedenim.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Quiz.Topic")
                        .WithMany("QuizRules")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.CBTE.StudentTestLog", b =>
                {
                    b.HasOne("Codedenim.Domain.Module", "Module")
                        .WithMany("StudentTestLogs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("StudentTestLogs")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.CorperEnrolledCourses", b =>
                {
                    b.HasOne("Codedenim.Domain.CourseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.Course", b =>
                {
                    b.HasOne("Codedenim.Domain.CorperEnrolledCourses")
                        .WithMany("Courses")
                        .HasForeignKey("CorperEnrolledCoursesId");
                });

            modelBuilder.Entity("Codedenim.Domain.CourseEnrollment", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("CourseEnrollement")
                        .HasForeignKey("StudentId1");
                });

            modelBuilder.Entity("Codedenim.Domain.CourseRating", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.EnrollForCourse", b =>
                {
                    b.HasOne("Codedenim.Domain.CourseCategory", "CourseCategory")
                        .WithMany("EnrollForCourse")
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("EnrollForCourse")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.Enrollment", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.File", b =>
                {
                    b.HasOne("Codedenim.Domain.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId1");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.Forum", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Course")
                        .WithOne("Forum")
                        .HasForeignKey("Codedenim.Domain.Forums.Forum", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumAnswer", b =>
                {
                    b.HasOne("Codedenim.Domain.Forums.ForumQuestion", "ForumQuestions")
                        .WithMany("ForumAnswers")
                        .HasForeignKey("ForumQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumAnswerVoteForumAnswers", b =>
                {
                    b.HasOne("Codedenim.Domain.Forums.ForumAnswer", "ForumAnswer")
                        .WithMany("ForumAnswerVoteForumAnswers")
                        .HasForeignKey("ForumAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Forums.VoteForumAnswer", "VoteForumAnswer")
                        .WithMany("ForumAnswerVoteForumAnswers")
                        .HasForeignKey("VoteForumAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumQuestion", b =>
                {
                    b.HasOne("Codedenim.Domain.Forums.Forum", "Forum")
                        .WithMany("ForumQuestions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Students")
                        .WithMany("ForumQuestions")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumQuestionView", b =>
                {
                    b.HasOne("Codedenim.Domain.Forums.ForumQuestion", "ForumQuestion")
                        .WithOne("ForumQuestionView")
                        .HasForeignKey("Codedenim.Domain.Forums.ForumQuestionView", "ForumQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Forums.ForumView", b =>
                {
                    b.HasOne("Codedenim.Domain.Forums.Forum", "Forum")
                        .WithOne("ForumView")
                        .HasForeignKey("Codedenim.Domain.Forums.ForumView", "ContentViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Module", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.QuizLog", b =>
                {
                    b.HasOne("Codedenim.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.StudentTopicQuiz", b =>
                {
                    b.HasOne("Codedenim.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.Topic", b =>
                {
                    b.HasOne("Codedenim.Domain.Module", "Module")
                        .WithMany("Topics")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.Quiz.TopicQuiz", b =>
                {
                    b.HasOne("Codedenim.Domain.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Quiz.Topic")
                        .WithMany("TopicQuizzes")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.StudentAssignedCourse", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Courses")
                        .WithMany("StudentAssignedCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("AssignedCourses")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.StudentPayment", b =>
                {
                    b.HasOne("Codedenim.Domain.CourseCategory", "CourseCategory")
                        .WithMany("StudentPayments")
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("StudentPayments")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Codedenim.Domain.SubmitAssignment", b =>
                {
                    b.HasOne("Codedenim.Domain.Student", "Student")
                        .WithMany("SubmitAssignments")
                        .HasForeignKey("StudentId");

                    b.HasOne("Codedenim.Domain.Quiz.Topic", "Topic")
                        .WithMany("SubmitAssignments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.TopicAssignment", b =>
                {
                    b.HasOne("Codedenim.Domain.Quiz.Topic", "Topic")
                        .WithMany("TopicAssignments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Codedenim.Domain.TopicMaterialUpload", b =>
                {
                    b.HasOne("Codedenim.Domain.Quiz.Topic", "Course")
                        .WithMany("MaterialUploads")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Tutor", "MaterialByTutor")
                        .WithMany()
                        .HasForeignKey("TutorId");
                });

            modelBuilder.Entity("Codedenim.Domain.TutorCourse", b =>
                {
                    b.HasOne("Codedenim.Domain.Course", "Courses")
                        .WithMany("TutorCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Domain.Tutor", "Tutor")
                        .WithMany("TutorCourses")
                        .HasForeignKey("TutorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Codedenim.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Codedenim.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Codedenim.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Codedenim.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
